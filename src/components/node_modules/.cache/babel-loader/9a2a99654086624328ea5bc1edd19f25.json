{"ast":null,"code":"var _jsxFileName = \"G:\\\\Assignment-10\\\\src\\\\components\\\\Blogs\\\\Blogs.js\";\nimport React from 'react';\nimport './Blogs.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Blogs = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blog-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"What is Context API?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Context API is a React structure that enables exchanging unique details and assists in solving prop-drilling from all levels of your application. With the help of Context Api developers can move properties from grandparent to child to parent etc.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"What is Semantic Tag?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Semantic tag provides the information about what's inside of it. For example h1, h2, h3, h4, h5, h6 are semantic tags. Cause it provides the information that something as important as headline it contains. A semantic element clearly describes its meaning to both the browser and the developer.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Difference between Inline and Block elements?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Inline elements do not create new line to document where Block elements create a new line. Inline elements can break among lines but block elements can't. We can nest Inline element between block and inline element but Block element can't be nested. Inline elements stay their own width where block elements take the entire horizontal width.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Blogs;\nexport default Blogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"sources":["G:/Assignment-10/src/components/Blogs/Blogs.js"],"names":["React","Blogs"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;;;AACA,MAAMC,KAAK,GAAG,MAAM;AAChB,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAWI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CArBD;;KAAMA,K;AAuBN,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport './Blogs.css'\r\nconst Blogs = () => {\r\n    return (\r\n        <div>\r\n            <div className='blog-container'>\r\n                <div className='blog'>\r\n                    <h2>What is Context API?</h2>\r\n                    <p>Context API is a React structure that enables exchanging unique details and assists in solving prop-drilling from all levels of your application. With the help of Context Api developers can move properties from grandparent to child to parent etc.</p>\r\n                </div>\r\n\r\n                <div className=\"blog\">\r\n                    <h2>What is Semantic Tag?</h2>\r\n                    <p>Semantic tag provides the information about what's inside of it. For example h1, h2, h3, h4, h5, h6 are semantic tags. Cause it provides the information that something as important as headline it contains. A semantic element clearly describes its meaning to both the browser and the developer.</p>\r\n                </div>\r\n\r\n                <div className='blog'>\r\n                    <h2>Difference between Inline and Block elements?</h2>\r\n                    <p>Inline elements do not create new line to document where Block elements create a new line. Inline elements can break among lines but block elements can't. We can nest Inline element between block and inline element but Block element can't be nested. Inline elements stay their own width where block elements take the entire horizontal width.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Blogs;"]},"metadata":{},"sourceType":"module"}