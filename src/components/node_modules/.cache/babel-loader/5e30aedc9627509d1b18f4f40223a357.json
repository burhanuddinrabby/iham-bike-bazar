{"ast":null,"code":"var _jsxFileName = \"G:\\\\Assignment-10\\\\src\\\\components\\\\Blogs\\\\Blogs.js\";\nimport React from 'react';\nimport './Blogs.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Blogs = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blog-container mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"What is differences between authorization and authentication?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Authentication is the process to verify someone who he/she is. And authorization is a process of verifying what specific applications, files, and data an user has access to view or edit.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Why using firebase? What other option do we have to implement authorization?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more. Back4App, AWS Amplify, Kuzzle, Couchbase, NativeScript are few alternatives of firebase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Difference between Inline and Block elements?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Inline elements do not create new line to document where Block elements create a new line. Inline elements can break among lines but block elements can't. We can nest Inline element between block and inline element but Block element can't be nested. Inline elements stay their own width where block elements take the entire horizontal width.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Blogs;\nexport default Blogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"sources":["G:/Assignment-10/src/components/Blogs/Blogs.js"],"names":["React","Blogs"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;;;AACA,MAAMC,KAAK,GAAG,MAAM;AAChB,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAWI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CArBD;;KAAMA,K;AAuBN,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport './Blogs.css'\r\nconst Blogs = () => {\r\n    return (\r\n        <div>\r\n            <div className='blog-container mt-3'>\r\n                <div className='blog'>\r\n                    <h2>What is differences between authorization and authentication?</h2>\r\n                    <p>Authentication is the process to verify someone who he/she is. And authorization is a process of verifying what specific applications, files, and data an user has access to view or edit.</p>\r\n                </div>\r\n\r\n                <div className=\"blog\">\r\n                    <h2>Why using firebase? What other option do we have to implement authorization?</h2>\r\n                    <p>Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more. Back4App, AWS Amplify, Kuzzle, Couchbase, NativeScript are few alternatives of firebase</p>\r\n                </div>\r\n\r\n                <div className='blog'>\r\n                    <h2>Difference between Inline and Block elements?</h2>\r\n                    <p>Inline elements do not create new line to document where Block elements create a new line. Inline elements can break among lines but block elements can't. We can nest Inline element between block and inline element but Block element can't be nested. Inline elements stay their own width where block elements take the entire horizontal width.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Blogs;"]},"metadata":{},"sourceType":"module"}