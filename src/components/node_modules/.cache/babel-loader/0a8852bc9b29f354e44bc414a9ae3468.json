{"ast":null,"code":"var _jsxFileName = \"G:\\\\Assignment-10\\\\src\\\\components\\\\RequireAuth\\\\RequireAuth.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport auth from '../../firebase.init';\nimport Loading from '../Login/Loding/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RequireAuth(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, loading] = useAuthState(auth);\n  const location = useLocation();\n\n  if (!user) {\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to when they were redirected. This allows us to send them\n    // along to that page after they login, which is a nicer user experience\n    // than dropping them off on the home page.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (loading) {\n    /*#__PURE__*/\n    _jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this);\n  }\n\n  return children;\n}\n\n_s(RequireAuth, \"A00qC6RD2cIyShXhVdXlUsqz+ss=\", false, function () {\n  return [useAuthState, useLocation];\n});\n\n_c = RequireAuth;\nexport default RequireAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequireAuth\");","map":{"version":3,"sources":["G:/Assignment-10/src/components/RequireAuth/RequireAuth.js"],"names":["React","useAuthState","Navigate","useLocation","auth","Loading","RequireAuth","children","user","loading","location","from"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;;AAEA,SAASC,WAAT,OAAmC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,YAAY,CAACG,IAAD,CAApC;AACA,QAAMM,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,MAAI,CAACK,IAAL,EAAW;AACP;AACA;AACA;AACA;AACA,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEG,QAAAA,IAAI,EAAED;AAAR,OAA7B;AAAiD,MAAA,OAAO;AAAxD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,MAAID,OAAJ,EAAa;AACT;AAAA,YAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AACH;;AAED,SAAOF,QAAP;AACH;;GAhBQD,W;UACmBL,Y,EACPE,W;;;KAFZG,W;AAkBT,eAAeA,WAAf","sourcesContent":["import React from 'react';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport auth from '../../firebase.init';\r\nimport Loading from '../Login/Loding/Loading';\r\n\r\nfunction RequireAuth({ children }) {\r\n    const [user, loading] = useAuthState(auth);\r\n    const location = useLocation();\r\n\r\n    if (!user) {\r\n        // Redirect them to the /login page, but save the current location they were\r\n        // trying to go to when they were redirected. This allows us to send them\r\n        // along to that page after they login, which is a nicer user experience\r\n        // than dropping them off on the home page.\r\n        return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n    }\r\n    if (loading) {\r\n        <Loading></Loading>\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\nexport default RequireAuth;"]},"metadata":{},"sourceType":"module"}